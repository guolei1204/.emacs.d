#s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (keyboard-escape-quit (("package-list-packages") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("package-list-packages" 1))) previous-buffer (("cider-jack-in-clojurescript" "cider-jack-in-clojurescript" "customize-themes" "customize") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("customize" 1 "customize-themes" 1 "cider-jack-in-clojurescript" 2))) widget-button-click (("sanityinc-solarized-dark" "sanityinc-solarized-light") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("sanityinc-solarized-light" 1 "sanityinc-solarized-dark" 1))) ivy-next-line (("refresh" "conn-info" "clear-help-banner" "sanityinc-solarized-light") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("sanityinc-solarized-light" 1 "clear-help-banner" 1 "conn-info" 1 "refresh" 1))) nil (("cider-drink-a-sip" "cider-drink-a-sip" "cider-drink-a-sip" "cider-drink-a-sip" "customize" "customize") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("customize" 2 "cider-drink-a-sip" 4))) previous-line (("customize-themes") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("customize-themes" 1))) counsel-find-file (("/Users/guolei/demo/godemo/hello.go" "/Users/guolei/demo/clojure/ns-play/" "/Users/guolei/demo/clojure/ns-play/" "/Users/guolei/demo/clojure/hello/" "/Users/guolei/demo/clojure/ns-play/" "/Users/guolei/demo/clojure/ns-play/src/ns_play/img.clj" "/Users/guolei/demo/clojure/ns-play/src/ns_play/" "/Users/guolei/demo/clojure/clojure-concurrency/" "/Users/guolei/demo/clojure/clojure-concurrency/" "/Users/guolei/demo/clojure/omn1be/") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("/Users/guolei/.emacs.d/custom.el" 1 "/Users/guolei/demo/godemo/hello.go" 1 "/Users/guolei/demo/clojure/ns-play/" 3 "/Users/guolei/demo/clojure/hello/" 1 "/Users/guolei/demo/clojure/ns-play/src/ns_play/img.clj" 1 "/Users/guolei/demo/clojure/ns-play/src/ns_play/" 1 "/Users/guolei/demo/clojure/clojure-concurrency/" 2 "/Users/guolei/demo/clojure/clojure-concurrency/project.clj" 1 "/Users/guolei/demo/clojure/omn1/" 2 "/Users/guolei/demo/clojure/omn1be/" 2))) ivy-partial-or-done (("history" "sanityinc-solarized-dark") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("sanityinc-solarized-dark" 1 "history" 1))) mouse-set-point (("cider-jack-in-clojurescript" "cider-jack-in" "cider-jack-in" "customize-themes") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("customize-themes" 1 "cider-jack-in" 2 "cider-jack-in-clojurescript" 1))) ivy-alt-done (("eshell" "eshell" "cider-jack-in-clojurescript" "cider-jack-in" "cider-jack-in" "cider-jack-in") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("cider-jack-in" 3 "cider-jack-in-clojurescript" 1 "eshell" 2))) kill-buffer (("*cider-error*" "*cider-error*" "*cider-error*" "*cider-error*" "*cider-error*" "*cider-error*" "*cider-repl ns-play*" "*cider-error*" "*unsent mail*" "*cider-error*") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("*cider-repl hello*" 1 "*unsent mail*" 2 "*cider-error*" 43 "*cider-repl ns-play*" 1 "*cider-repl clojure-concurrency*" 2 "cider-drink-a-sip" 1 "*cider-repl localhost*" 1 "*Ibuffer*" 1 "*cider-repl-history*" 1 "core.clj" 1 "/Users/guolei/.emacs.d/org-clock-save.el" 2))) counsel-describe-variable (("cider-result-buffer") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("cider-result-buffer" 1))) paredit-backward-delete (("cider-drink-a-sip" "cider-drink-a-sip" "clojure-mode") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("clojure-mode" 1 "cider-drink-a-sip" 2))) save-buffer (("list-packages") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("list-packages" 1))) indent-for-tab-command (("java.awt.image.BufferedImageOp" "javax.imageio.ImageIO" ":import" "clojure.java.io" ":require") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (":require" 1 "clojure.java.io" 1 ":import" 1 "javax.imageio.ImageIO" 1 "java.awt.image.BufferedImageOp" 1))) cider-repl-tab (("-map :one 1 :two 2" "ted-set :b  :c :a" " x" "ted-set :b :c :a" "sorted-set" "tor (range 5)" "r (range 5)" "r (range 5)" "til.ArrayList java.util.List" "macroexpand") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("range" 1 "-map :one 1 :two 2" 1 "ted-set :b  :c :a" 1 " x" 1 "ted-set :b :c :a" 1 "sorted-set" 1 "tor (range 5)" 1 "r (range 5)" 2 "til.ArrayList java.util.List" 1 "java.util.List" 1 "apply" 3 "count" 3 "n avg [& collection]" 1 " get-race [& ages]" 1 "method travel :timelord [& ages]" 1 "  ages" 1 "travel" 3 "erimeter circle" 1 "area" 1 "extend" 1 "ShapeProperties" 3 "-sides [this] 4" 1 "d-type Cir" 1 "extend-type" 1 "-sides [this] Double" 1 "m-sides circle" 1 "clojure." 4 "clojure-concurrency.core" 4 "ure-concurrency.core :reload-all" 1 "clojure.core" 1 "spawn-fiber" 2 ".core/deliver" 1 "awn-fiber #(clojure.core/deliver p3 (clojure.core/+ @p1 @p2))" 1 "-thread #(println @p3)" 1 "jure.core/deliver p1 99" 1 "ln @f" 1 "-set account 10" 1 "future" 2 "sync (test1)" 1 "sync (ref-set account 5)" 1 "account" 2 "-set account 5" 1 "sync" 1 "awn-fiber #(log-events 500 n)" 3 "ts conj event-d" 1 "even?" 1 "  (filter #(= 0 %) @events)" 1 " #(= 0 %)" 1 "-off agt sum (vec (range 10))" 1 "agt" 1 "agent" 1 "reset!" 1 ":require" 5 " \"running in a go block\"" 1 "clojure.core.async" 2 ":requires" 1 ":refer" 3 "sequence" 1 "ure " 1 "macroexpand" 1))) dired-find-file (("cider-jack-in") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("cider-jack-in" 1))) ivy-switch-buffer (("*cider-repl clojure-concurrency*" "core.clj" "*cider-repl localhost*" "*cider-repl localhost*" "*cider-repl clojure-concurrency*" "core.clj" "*cider-repl clojure-concurrency*" "clojure-concurrency.core" "clojure-concurrency.core" "*Messages*") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("clojure-concurrency.core" 3 "*cider-repl clojure-concurrency*" 4 "core.clj" 3 "*cider-repl localhost*" 2 "*Ibuffer*" 1 "*cider-repl hello*" 1 "*Messages*" 2))) mac-mwheel-scroll (("cider-drink-a-sip") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("cider-drink-a-sip" 1))) cider-refresh (("cider-drink-a-sip" "cider-drink-a-sip") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("cider-drink-a-sip" 2))) cider-drink-a-sip (("cider-drink-a-sip" "cider-drink-a-sip" "cider-drink-a-sip" "cider-drink-a-sip" "cider-drink-a-sip" "cider-drink-a-sip" "cider-drink-a-sip" "cider-drink-a-sip" "cider-drink-a-sip" "cider-drink-a-sip") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("cider-drink-a-sip" 44))) cider-inspect (("cider-drink-a-sip") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("cider-drink-a-sip" 1))) cider-repl-return (("cider-drink-a-sip") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("cider-drink-a-sip" 1))) cider-display-connection-info (("cider-drink-a-sip") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("cider-drink-a-sip" 1))) cua-scroll-up (("cider-drink-a-sip") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("cider-drink-a-sip" 1))) cider-interrupt (("cider-drink-a-sip") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("cider-drink-a-sip" 1))) quit-window (("cider-drink-a-sip" "cider-drink-a-sip") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("cider-drink-a-sip" 2))) ivy-backward-delete-char (("cider-drink-a-sip") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("cider-drink-a-sip" 1))) cider-repl-handle-shortcut (("restart" "restart" "version" "version" "clear-help-banner" "history" "conn-info" "refresh" "ns" "restart") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("quit" 1 "restart" 3 "version" 2 "clear-help-banner" 1 "history" 1 "conn-info" 1 "refresh" 1 "ns" 1))) self-insert-command (("restart" "restart" "restart" "quit") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("quit" 1 "restart" 3))) kill-region (("cider-drink-a-sip") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("cider-drink-a-sip" 1))) ibuffer-jump-to-buffer (("*nrepl-server clojure-concurrency*") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("*nrepl-server clojure-concurrency*" 1))) ivy-previous-line (("ns") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("ns" 1))) switch-window (("eshell") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("eshell" 1)))))